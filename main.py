import os 
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
import database as db

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

REVIEW, MEETING_DATE = range(2)

BACK_BUTTON_CALLBACK = "back_to_start"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    welcome_text = (
        "–í—ã –ø–æ–ø–∞–ª–∏ –≤ —á–∞—Ç-–±–æ—Ç –≥—Ä—É–ø–ø—ã –∫–æ–º–ø–∞–Ω–∏–π VR LOGISTIC. –í –Ω–∞—à—É –≥—Ä—É–ø–ø—É –∫–æ–º–ø–∞–Ω–∏–π –≤—Ö–æ–¥–∏—Ç —Ä—è–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, "
        "—á—å—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Ç–∞–∫ –∏–ª–∏ –∏–Ω–∞—á–µ —Å–≤—è–∑–∞–Ω–∞ —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "- –û—Ç–≤–µ—á–∞—é –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "- –ü–æ–º–æ–≥—É —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ"
    )

    buttons = [
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
        [InlineKeyboardButton("–í–∏–¥–µ–æ", callback_data="video")],
        [InlineKeyboardButton("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", callback_data="presentation")],
        [InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º—ã", callback_data="programs")],
    ]
    reply_markup = InlineKeyboardMarkup(buttons)

    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(welcome_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data == "contacts":
        await contacts(update, context)
    elif query.data == "video":
        await send_video(update, context)
    elif query.data == "presentation":
        await send_presentation(update, context)
    elif query.data == "programs":
        await send_programs(update, context)
    elif query.data == BACK_BUTTON_CALLBACK:
        await start(update, context)

def get_back_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=BACK_BUTTON_CALLBACK)]
    ])

async def contacts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    contacts_text = "–ö–æ–Ω—Ç–∞–∫—Ç—ã HR-–æ—Ç–¥–µ–ª–∞:\n\n‚Ä¢ Email: hr@vrlogistic.com\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX"
    if update.callback_query:
        await update.callback_query.edit_message_text(
            contacts_text, 
            reply_markup=get_back_keyboard()
        )
    else:
        await update.message.reply_text(
            contacts_text, 
            reply_markup=get_back_keyboard()
        )

async def send_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.callback_query:
        await update.callback_query.message.reply_video(
            video=open("assets/office_tour.mp4", "rb"),
            reply_markup=get_back_keyboard()
        )
    else:
        await update.message.reply_video(
            video=open("assets/office_tour.mp4", "rb"),
            reply_markup=get_back_keyboard()
        )

async def send_presentation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.callback_query:
        await update.callback_query.message.reply_document(
            document=open("assets/presentation.pdf", "rb"),
            reply_markup=get_back_keyboard()
        )
    else:
        await update.message.reply_document(
            document=open("assets/presentation.pdf", "rb"),
            reply_markup=get_back_keyboard()
        )

async def send_programs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    programs_text = "–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n\n‚Ä¢ 1C\n‚Ä¢ SAP\n‚Ä¢ Microsoft Teams\n‚Ä¢ Jira"
    if update.callback_query:
        await update.callback_query.edit_message_text(
            programs_text, 
            reply_markup=get_back_keyboard()
        )
    else:
        await update.message.reply_text(
            programs_text, 
            reply_markup=get_back_keyboard()
        )

async def handle_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
    return REVIEW

async def save_review(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    review_text = update.message.text
    
    db.save_review(user.id, user.username, review_text)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üíô")
    
    return ConversationHandler.END

async def set_meeting_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    return MEETING_DATE

async def save_meeting_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.message.chat_id
    date_str = update.message.text
    
    try:
        meeting_date = datetime.strptime(date_str, "%d.%m.%Y")
        now = datetime.now()
        
        if meeting_date < now:
            await update.message.reply_text("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
            return MEETING_DATE
        
        db.save_meeting(chat_id, meeting_date)
        reminder_time = meeting_date - timedelta(days=1)
        
        context.job_queue.run_once(
            send_meeting_reminder,
            when=reminder_time,
            chat_id=chat_id,
            name=f"meeting_reminder_{chat_id}",
        )
        
        await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return MEETING_DATE
    
    return ConversationHandler.END

async def send_meeting_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    await context.bot.send_message(
        job.chat_id,
        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å HR!",
    )

def main() -> None:
    application = Application.builder().token(TOKEN).build()
    

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("review", handle_review))
    

    application.add_handler(CallbackQueryHandler(button_handler))
    

    review_handler = ConversationHandler(
        entry_points=[CommandHandler("review", handle_review)],
        states={
            REVIEW: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_review)],
        },
        fallbacks=[],
    )
    application.add_handler(review_handler)
    

    meeting_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤—Å—Ç—Ä–µ—á–µ$"), set_meeting_reminder)],
        states={
            MEETING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_meeting_date)],
        },
        fallbacks=[],
    )
    application.add_handler(meeting_handler)
    
    application.run_polling()

if __name__ == "__main__":
    main()
